var buildDictionary = require('sails-build-dictionary');
var path = require('path');

module.exports = function (sails) {
  return {
    initialize: function (next) {
      loadSerializers(function (err, modules) {
        if (err) {
          sails.log.error('Error occurred loading serializers ::');
          sails.log.error(err);
        }

        modules = createSerializersIfNotExist(modules);

        // Expose modules on `sails`
        sails.serializers = modules;

        // Expose globals (if enabled)
        _.each(sails.services, function (service,identity) {
          var globalName = service.globalId || service.identity;
          global[globalName] = service;
        });
      });

      next();
    }
  };

  function createSerializersIfNotExist(serializers) {
    var models = sails.models,
      modelNames = _.keys(models);

    _.forEach(modelNames, function(name) {
      if (!serializers.hasOwnProperty(name)) {
        serializers[name] = createSerializer(name);
      }
    });

    return serializers;
  }

  function createSerializer(identity) {
    sails.log.debug('Used autogenerated serializer for:', identity);

    var model = sails.models[identity];

    return {
      globalId: model.globalId,
      identity: model.identity,
      attributes: _.keys(model.attributes),
      sideload: false
    }
  }

  function loadSerializers(callback) {
    buildDictionary.optional({
      dirname: path.resolve(sails.config.appPath, 'api/serializers'),
      filter: /(.+)Serializer\.(js|coffee|litcoffee)$/,
      depth     : 1,
      replaceExpr: /Serializer/,
      flattenDirectories: true,
      caseSensitive : true
    }, bindToSails(callback));
  }

  function bindToSails(callback) {
    return function(err, modules) {
      if (err) {return callback(err);}
      _.forEach(modules, function(module) {
        // Add a reference to the Sails app that loaded the module
        module.sails = sails;
        // Bind all methods to the module context
        _.bindAll(module);
      });
      return callback(null, modules);
    };
  }
};
